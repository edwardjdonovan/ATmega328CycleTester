
ED5000_CT_ATmega328P_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000003dc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008ac  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a4  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c5  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  0000186c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000f5ca  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000847  00000000  00000000  00010fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000117f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000374  00000000  00000000  000118d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	79 d1       	rcall	.+754    	; 0x37e <main>
  8c:	a5 c1       	rjmp	.+842    	; 0x3d8 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <rawKey1Pressed>:
}

void assertRetraction(void){
	PORTB &= ~(1<<PINB2); //assert bar retract
	_delay_ms(minAssertTimeMS);
	PORTB |= (1<<PINB2); //allow bar protract
  90:	93 b1       	in	r25, 0x03	; 3
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	89 27       	eor	r24, r25
  96:	81 70       	andi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	08 95       	ret

0000009c <rawKey2Pressed>:
  9c:	83 b1       	in	r24, 0x03	; 3
  9e:	86 95       	lsr	r24
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	89 27       	eor	r24, r25
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <debounceSwitch1>:
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	c0 91 02 01 	lds	r28, 0x0102
  b2:	d0 91 03 01 	lds	r29, 0x0103
  b6:	cc 0f       	add	r28, r28
  b8:	dd 1f       	adc	r29, r29
  ba:	ea df       	rcall	.-44     	; 0x90 <rawKey1Pressed>
  bc:	d0 6e       	ori	r29, 0xE0	; 224
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	89 2b       	or	r24, r25
  c4:	11 f0       	breq	.+4      	; 0xca <debounceSwitch1+0x20>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	c2 2b       	or	r28, r18
  cc:	d3 2b       	or	r29, r19
  ce:	d0 93 03 01 	sts	0x0103, r29
  d2:	c0 93 02 01 	sts	0x0102, r28
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	c1 15       	cp	r28, r1
  da:	d0 4f       	sbci	r29, 0xF0	; 240
  dc:	09 f0       	breq	.+2      	; 0xe0 <debounceSwitch1+0x36>
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <debounceSwitch2>:
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	c0 91 00 01 	lds	r28, 0x0100
  ee:	d0 91 01 01 	lds	r29, 0x0101
  f2:	cc 0f       	add	r28, r28
  f4:	dd 1f       	adc	r29, r29
  f6:	d2 df       	rcall	.-92     	; 0x9c <rawKey2Pressed>
  f8:	d0 6e       	ori	r29, 0xE0	; 224
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	89 2b       	or	r24, r25
 100:	11 f0       	breq	.+4      	; 0x106 <debounceSwitch2+0x20>
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	c2 2b       	or	r28, r18
 108:	d3 2b       	or	r29, r19
 10a:	d0 93 01 01 	sts	0x0101, r29
 10e:	c0 93 00 01 	sts	0x0100, r28
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	c1 15       	cp	r28, r1
 116:	d0 4f       	sbci	r29, 0xF0	; 240
 118:	09 f0       	breq	.+2      	; 0x11c <debounceSwitch2+0x36>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <counter_init>:
 122:	23 9a       	sbi	0x04, 3	; 4
 124:	2b 9a       	sbi	0x05, 3	; 5
 126:	08 95       	ret

00000128 <incrementCounter>:
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	18 16       	cp	r1, r24
 12c:	19 06       	cpc	r1, r25
 12e:	dc f4       	brge	.+54     	; 0x166 <incrementCounter+0x3e>
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	2b 98       	cbi	0x05, 3	; 5
 136:	4f ef       	ldi	r20, 0xFF	; 255
 138:	51 ee       	ldi	r21, 0xE1	; 225
 13a:	64 e0       	ldi	r22, 0x04	; 4
 13c:	41 50       	subi	r20, 0x01	; 1
 13e:	50 40       	sbci	r21, 0x00	; 0
 140:	60 40       	sbci	r22, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <incrementCounter+0x14>
 144:	00 c0       	rjmp	.+0      	; 0x146 <incrementCounter+0x1e>
 146:	00 00       	nop
 148:	2b 9a       	sbi	0x05, 3	; 5
 14a:	4f ef       	ldi	r20, 0xFF	; 255
 14c:	51 ee       	ldi	r21, 0xE1	; 225
 14e:	64 e0       	ldi	r22, 0x04	; 4
 150:	41 50       	subi	r20, 0x01	; 1
 152:	50 40       	sbci	r21, 0x00	; 0
 154:	60 40       	sbci	r22, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <incrementCounter+0x28>
 158:	00 c0       	rjmp	.+0      	; 0x15a <incrementCounter+0x32>
 15a:	00 00       	nop
 15c:	2f 5f       	subi	r18, 0xFF	; 255
 15e:	3f 4f       	sbci	r19, 0xFF	; 255
 160:	28 17       	cp	r18, r24
 162:	39 07       	cpc	r19, r25
 164:	39 f7       	brne	.-50     	; 0x134 <incrementCounter+0xc>
 166:	08 95       	ret

00000168 <errorHandler_init>:
 168:	25 9a       	sbi	0x04, 5	; 4
 16a:	24 9a       	sbi	0x04, 4	; 4
 16c:	2c 9a       	sbi	0x05, 4	; 5
 16e:	08 95       	ret

00000170 <errorEEPROMWrite>:
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	1f 93       	push	r17
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	6b 01       	movw	r12, r22
 180:	7c 01       	movw	r14, r24
 182:	14 2f       	mov	r17, r20
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	fc d0       	rcall	.+504    	; 0x382 <eeprom_read_word>
 18a:	80 3f       	cpi	r24, 0xF0	; 240
 18c:	23 e0       	ldi	r18, 0x03	; 3
 18e:	92 07       	cpc	r25, r18
 190:	18 f4       	brcc	.+6      	; 0x198 <errorEEPROMWrite+0x28>
 192:	ec 01       	movw	r28, r24
 194:	65 96       	adiw	r28, 0x15	; 21
 196:	02 c0       	rjmp	.+4      	; 0x19c <errorEEPROMWrite+0x2c>
 198:	c5 e1       	ldi	r28, 0x15	; 21
 19a:	d0 e0       	ldi	r29, 0x00	; 0
 19c:	be 01       	movw	r22, r28
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	07 d1       	rcall	.+526    	; 0x3b2 <eeprom_write_word>
 1a4:	b7 01       	movw	r22, r14
 1a6:	a6 01       	movw	r20, r12
 1a8:	ce 01       	movw	r24, r28
 1aa:	fe d0       	rcall	.+508    	; 0x3a8 <eeprom_write_dword>
 1ac:	8c 2f       	mov	r24, r28
 1ae:	8c 5f       	subi	r24, 0xFC	; 252
 1b0:	6c ef       	ldi	r22, 0xFC	; 252
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	eb d0       	rcall	.+470    	; 0x38c <eeprom_write_byte>
 1b6:	8c 2f       	mov	r24, r28
 1b8:	8b 5f       	subi	r24, 0xFB	; 251
 1ba:	61 2f       	mov	r22, r17
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	e6 d0       	rcall	.+460    	; 0x38c <eeprom_write_byte>
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	08 95       	ret

000001d0 <errorHandler>:
 1d0:	c8 2f       	mov	r28, r24
 1d2:	ca df       	rcall	.-108    	; 0x168 <errorHandler_init>
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	cc 23       	and	r28, r28
 1d8:	c1 f0       	breq	.+48     	; 0x20a <errorHandler+0x3a>
 1da:	98 2f       	mov	r25, r24
 1dc:	2d 9a       	sbi	0x05, 5	; 5
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	39 e6       	ldi	r19, 0x69	; 105
 1e2:	48 e1       	ldi	r20, 0x18	; 24
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	30 40       	sbci	r19, 0x00	; 0
 1e8:	40 40       	sbci	r20, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <errorHandler+0x14>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <errorHandler+0x1e>
 1ee:	00 00       	nop
 1f0:	2d 98       	cbi	0x05, 5	; 5
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	39 e6       	ldi	r19, 0x69	; 105
 1f6:	48 e1       	ldi	r20, 0x18	; 24
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	30 40       	sbci	r19, 0x00	; 0
 1fc:	40 40       	sbci	r20, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <errorHandler+0x28>
 200:	00 c0       	rjmp	.+0      	; 0x202 <errorHandler+0x32>
 202:	00 00       	nop
 204:	9f 5f       	subi	r25, 0xFF	; 255
 206:	9c 13       	cpse	r25, r28
 208:	e9 cf       	rjmp	.-46     	; 0x1dc <errorHandler+0xc>
 20a:	9f ef       	ldi	r25, 0xFF	; 255
 20c:	2d e3       	ldi	r18, 0x3D	; 61
 20e:	39 e4       	ldi	r19, 0x49	; 73
 210:	91 50       	subi	r25, 0x01	; 1
 212:	20 40       	sbci	r18, 0x00	; 0
 214:	30 40       	sbci	r19, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <errorHandler+0x40>
 218:	00 c0       	rjmp	.+0      	; 0x21a <errorHandler+0x4a>
 21a:	00 00       	nop
 21c:	dc cf       	rjmp	.-72     	; 0x1d6 <errorHandler+0x6>

0000021e <exitDeviceCycleTest_init>:
 21e:	14 b8       	out	0x04, r1	; 4
 220:	22 9a       	sbi	0x04, 2	; 4
 222:	85 b1       	in	r24, 0x05	; 5
 224:	83 60       	ori	r24, 0x03	; 3
 226:	85 b9       	out	0x05, r24	; 5
 228:	2a 9a       	sbi	0x05, 2	; 5
 22a:	08 95       	ret

0000022c <checkProtractExitBar>:
}
	
int checkProtractExitBar(){
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	c8 ec       	ldi	r28, 0xC8	; 200
 232:	d0 e0       	ldi	r29, 0x00	; 0
	
	bool debouncedSwitch2State;
	bool debouncedSwitch1State;	
	
	for (int i = 0; i < 200; i++) {
		debouncedSwitch1State = debounceSwitch1();
 234:	3a df       	rcall	.-396    	; 0xaa <debounceSwitch1>
		if(debouncedSwitch1State) break;
 236:	81 11       	cpse	r24, r1
 238:	0b c0       	rjmp	.+22     	; 0x250 <checkProtractExitBar+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23a:	8f e1       	ldi	r24, 0x1F	; 31
 23c:	9e e4       	ldi	r25, 0x4E	; 78
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <checkProtractExitBar+0x12>
 242:	00 c0       	rjmp	.+0      	; 0x244 <checkProtractExitBar+0x18>
 244:	00 00       	nop
 246:	21 97       	sbiw	r28, 0x01	; 1
int checkProtractExitBar(){
	
	bool debouncedSwitch2State;
	bool debouncedSwitch1State;	
	
	for (int i = 0; i < 200; i++) {
 248:	a9 f7       	brne	.-22     	; 0x234 <checkProtractExitBar+0x8>
		_delay_ms(5);
	}
		

	if(!debouncedSwitch1State){
		return 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	12 c0       	rjmp	.+36     	; 0x274 <checkProtractExitBar+0x48>
 250:	ca e0       	ldi	r28, 0x0A	; 10
 252:	d0 e0       	ldi	r29, 0x00	; 0
		//if switch1 is closed, continue, if its open, break out of main loop
	}
	
	for (int h = 0; h < 10; h++) {
		debouncedSwitch2State = debounceSwitch2();
 254:	48 df       	rcall	.-368    	; 0xe6 <debounceSwitch2>
		if(debouncedSwitch2State) break;
 256:	81 11       	cpse	r24, r1
 258:	0b c0       	rjmp	.+22     	; 0x270 <checkProtractExitBar+0x44>
 25a:	8f e1       	ldi	r24, 0x1F	; 31
 25c:	9e e4       	ldi	r25, 0x4E	; 78
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <checkProtractExitBar+0x32>
 262:	00 c0       	rjmp	.+0      	; 0x264 <checkProtractExitBar+0x38>
 264:	00 00       	nop
 266:	21 97       	sbiw	r28, 0x01	; 1
	if(!debouncedSwitch1State){
		return 1;
		//if switch1 is closed, continue, if its open, break out of main loop
	}
	
	for (int h = 0; h < 10; h++) {
 268:	a9 f7       	brne	.-22     	; 0x254 <checkProtractExitBar+0x28>

	if(debouncedSwitch2State){
		return 4;
		//if switch2 is closed, contiue; if closed, break
	}		
	return 0;
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <checkProtractExitBar+0x48>
		_delay_ms(5);
		}
	

	if(debouncedSwitch2State){
		return 4;
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	90 e0       	ldi	r25, 0x00	; 0
		//if switch2 is closed, contiue; if closed, break
	}		
	return 0;
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <checkRetractExitBar>:

int checkRetractExitBar(){
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	c8 ec       	ldi	r28, 0xC8	; 200
 280:	d0 e0       	ldi	r29, 0x00	; 0
	bool debouncedSwitch2State; 
	bool debouncedSwitch1State;

	
	for (int j = 0; j < 200; j++){ 
		debouncedSwitch2State = debounceSwitch2();
 282:	31 df       	rcall	.-414    	; 0xe6 <debounceSwitch2>
		if(debouncedSwitch2State) break;
 284:	81 11       	cpse	r24, r1
 286:	0b c0       	rjmp	.+22     	; 0x29e <checkRetractExitBar+0x24>
 288:	8f e1       	ldi	r24, 0x1F	; 31
 28a:	9e e4       	ldi	r25, 0x4E	; 78
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <checkRetractExitBar+0x12>
 290:	00 c0       	rjmp	.+0      	; 0x292 <checkRetractExitBar+0x18>
 292:	00 00       	nop
 294:	21 97       	sbiw	r28, 0x01	; 1
	
	bool debouncedSwitch2State; 
	bool debouncedSwitch1State;

	
	for (int j = 0; j < 200; j++){ 
 296:	a9 f7       	brne	.-22     	; 0x282 <checkRetractExitBar+0x8>
		if(debouncedSwitch2State) break;
		_delay_ms(5);
	}	

	if(!debouncedSwitch2State){
		return 2;
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	12 c0       	rjmp	.+36     	; 0x2c2 <checkRetractExitBar+0x48>
 29e:	ca e0       	ldi	r28, 0x0A	; 10
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
		//if switch2 is closed, contiue; if closed, break
	}

	
	for (int k = 0; k < 10; k++) {
		debouncedSwitch1State = debounceSwitch1();
 2a2:	03 df       	rcall	.-506    	; 0xaa <debounceSwitch1>
		if(debouncedSwitch1State) break;
 2a4:	81 11       	cpse	r24, r1
 2a6:	0b c0       	rjmp	.+22     	; 0x2be <checkRetractExitBar+0x44>
 2a8:	8f e1       	ldi	r24, 0x1F	; 31
 2aa:	9e e4       	ldi	r25, 0x4E	; 78
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <checkRetractExitBar+0x32>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <checkRetractExitBar+0x38>
 2b2:	00 00       	nop
 2b4:	21 97       	sbiw	r28, 0x01	; 1
		return 2;
		//if switch2 is closed, contiue; if closed, break
	}

	
	for (int k = 0; k < 10; k++) {
 2b6:	a9 f7       	brne	.-22     	; 0x2a2 <checkRetractExitBar+0x28>
	
	if(debouncedSwitch1State){
		return 3;
		//if switch1 is closed, continue, if its open, break out of main loop
	}	
	return 0;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <checkRetractExitBar+0x48>
		if(debouncedSwitch1State) break;
		_delay_ms(5);
	}
	
	if(debouncedSwitch1State){
		return 3;
 2be:	83 e0       	ldi	r24, 0x03	; 3
 2c0:	90 e0       	ldi	r25, 0x00	; 0
		//if switch1 is closed, continue, if its open, break out of main loop
	}	
	return 0;
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <exitDeviceCycleTest>:

	
int exitDeviceCycleTest(void){
 2c8:	cf 92       	push	r12
 2ca:	df 92       	push	r13
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	uint32_t counter = 0;
	int result = 0;
	exitDeviceCycleTest_init();
 2d4:	a4 df       	rcall	.-184    	; 0x21e <exitDeviceCycleTest_init>
	counter_init();
 2d6:	25 df       	rcall	.-438    	; 0x122 <counter_init>
	//need to protract exit bar and evaluate state
	result = checkProtractExitBar();
 2d8:	a9 df       	rcall	.-174    	; 0x22c <checkProtractExitBar>
 2da:	ec 01       	movw	r28, r24
	if(result !=0) {
 2dc:	00 97       	sbiw	r24, 0x00	; 0
 2de:	f1 f0       	breq	.+60     	; 0x31c <exitDeviceCycleTest+0x54>
		if (result == 1){
 2e0:	81 30       	cpi	r24, 0x01	; 1
 2e2:	91 05       	cpc	r25, r1
 2e4:	41 f4       	brne	.+16     	; 0x2f6 <exitDeviceCycleTest+0x2e>
			errorEEPROMWrite(counter, 5);
 2e6:	45 e0       	ldi	r20, 0x05	; 5
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	cb 01       	movw	r24, r22
 2ee:	40 df       	rcall	.-384    	; 0x170 <errorEEPROMWrite>
			return 5;
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	3d c0       	rjmp	.+122    	; 0x370 <exitDeviceCycleTest+0xa8>
			 }
		else if(result == 4) {
 2f6:	84 30       	cpi	r24, 0x04	; 4
 2f8:	91 05       	cpc	r25, r1
 2fa:	41 f4       	brne	.+16     	; 0x30c <exitDeviceCycleTest+0x44>
			errorEEPROMWrite(counter, 6);
 2fc:	46 e0       	ldi	r20, 0x06	; 6
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	cb 01       	movw	r24, r22
 304:	35 df       	rcall	.-406    	; 0x170 <errorEEPROMWrite>
			return 6;
 306:	86 e0       	ldi	r24, 0x06	; 6
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	32 c0       	rjmp	.+100    	; 0x370 <exitDeviceCycleTest+0xa8>
			}
		else{
			errorEEPROMWrite(counter, result);
 30c:	48 2f       	mov	r20, r24
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	cb 01       	movw	r24, r22
 314:	2d df       	rcall	.-422    	; 0x170 <errorEEPROMWrite>
			return result;	//retvalue are 5 and 6 to differentiate initialization failure from bar protraction failure
 316:	8c 2f       	mov	r24, r28
 318:	9d 2f       	mov	r25, r29
 31a:	2a c0       	rjmp	.+84     	; 0x370 <exitDeviceCycleTest+0xa8>
 31c:	c1 2c       	mov	r12, r1
 31e:	d1 2c       	mov	r13, r1
 320:	76 01       	movw	r14, r12

		/*new code*/
		//assertRetraction();
		/*end new code*/	
	
		result = checkRetractExitBar();
 322:	ab df       	rcall	.-170    	; 0x27a <checkRetractExitBar>
 324:	ec 01       	movw	r28, r24
		if(result!=0) {
 326:	00 97       	sbiw	r24, 0x00	; 0
 328:	39 f0       	breq	.+14     	; 0x338 <exitDeviceCycleTest+0x70>
			errorEEPROMWrite(counter, result);
 32a:	48 2f       	mov	r20, r24
 32c:	c7 01       	movw	r24, r14
 32e:	b6 01       	movw	r22, r12
 330:	1f df       	rcall	.-450    	; 0x170 <errorEEPROMWrite>

		/*new code*/
		//assertRetraction();
		/*end new code*/	
	
		result = checkRetractExitBar();
 332:	8c 2f       	mov	r24, r28
 334:	9d 2f       	mov	r25, r29
		if(result!=0) {
			errorEEPROMWrite(counter, result);
			return result;
 336:	1c c0       	rjmp	.+56     	; 0x370 <exitDeviceCycleTest+0xa8>
 338:	2f ef       	ldi	r18, 0xFF	; 255
 33a:	89 e6       	ldi	r24, 0x69	; 105
 33c:	98 e1       	ldi	r25, 0x18	; 24
 33e:	21 50       	subi	r18, 0x01	; 1
 340:	80 40       	sbci	r24, 0x00	; 0
 342:	90 40       	sbci	r25, 0x00	; 0
 344:	e1 f7       	brne	.-8      	; 0x33e <exitDeviceCycleTest+0x76>
 346:	00 c0       	rjmp	.+0      	; 0x348 <exitDeviceCycleTest+0x80>
 348:	00 00       	nop
		}
		
		_delay_ms(500); //needs to be at least 400mS
		
		result = checkProtractExitBar();
 34a:	70 df       	rcall	.-288    	; 0x22c <checkProtractExitBar>
 34c:	ec 01       	movw	r28, r24
		if(result!=0){
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	39 f0       	breq	.+14     	; 0x360 <exitDeviceCycleTest+0x98>
			errorEEPROMWrite(counter, result);
 352:	48 2f       	mov	r20, r24
 354:	c7 01       	movw	r24, r14
 356:	b6 01       	movw	r22, r12
 358:	0b df       	rcall	.-490    	; 0x170 <errorEEPROMWrite>
			return result;
		}
		
		_delay_ms(500); //needs to be at least 400mS
		
		result = checkProtractExitBar();
 35a:	8c 2f       	mov	r24, r28
 35c:	9d 2f       	mov	r25, r29
		if(result!=0){
			errorEEPROMWrite(counter, result);
			return result;
 35e:	08 c0       	rjmp	.+16     	; 0x370 <exitDeviceCycleTest+0xa8>
		}
		incrementCounter(1);	//costs 200ms
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	e2 de       	rcall	.-572    	; 0x128 <incrementCounter>
		counter = counter+1;
 364:	2f ef       	ldi	r18, 0xFF	; 255
 366:	c2 1a       	sub	r12, r18
 368:	d2 0a       	sbc	r13, r18
 36a:	e2 0a       	sbc	r14, r18
 36c:	f2 0a       	sbc	r15, r18
	}
 36e:	d9 cf       	rjmp	.-78     	; 0x322 <exitDeviceCycleTest+0x5a>
	return result;
}
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	08 95       	ret

0000037e <main>:
 */
int main(void)
{ 
	uint8_t error = 0;
	
	error = exitDeviceCycleTest();
 37e:	a4 df       	rcall	.-184    	; 0x2c8 <exitDeviceCycleTest>
	
	//only enter this loop if there is a failure
	errorHandler(error);
 380:	27 df       	rcall	.-434    	; 0x1d0 <errorHandler>

00000382 <eeprom_read_word>:
 382:	a8 e1       	ldi	r26, 0x18	; 24
 384:	b0 e0       	ldi	r27, 0x00	; 0
 386:	42 e0       	ldi	r20, 0x02	; 2
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	18 c0       	rjmp	.+48     	; 0x3bc <eeprom_read_blraw>

0000038c <eeprom_write_byte>:
 38c:	26 2f       	mov	r18, r22

0000038e <eeprom_write_r18>:
 38e:	f9 99       	sbic	0x1f, 1	; 31
 390:	fe cf       	rjmp	.-4      	; 0x38e <eeprom_write_r18>
 392:	1f ba       	out	0x1f, r1	; 31
 394:	92 bd       	out	0x22, r25	; 34
 396:	81 bd       	out	0x21, r24	; 33
 398:	20 bd       	out	0x20, r18	; 32
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	fa 9a       	sbi	0x1f, 2	; 31
 3a0:	f9 9a       	sbi	0x1f, 1	; 31
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	08 95       	ret

000003a8 <eeprom_write_dword>:
 3a8:	24 2f       	mov	r18, r20
 3aa:	f1 df       	rcall	.-30     	; 0x38e <eeprom_write_r18>
 3ac:	25 2f       	mov	r18, r21
 3ae:	ef df       	rcall	.-34     	; 0x38e <eeprom_write_r18>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <eeprom_write_word>

000003b2 <eeprom_write_word>:
 3b2:	ec df       	rcall	.-40     	; 0x38c <eeprom_write_byte>
 3b4:	27 2f       	mov	r18, r23
 3b6:	eb cf       	rjmp	.-42     	; 0x38e <eeprom_write_r18>

000003b8 <eeprom_read_block>:
 3b8:	dc 01       	movw	r26, r24
 3ba:	cb 01       	movw	r24, r22

000003bc <eeprom_read_blraw>:
 3bc:	fc 01       	movw	r30, r24
 3be:	f9 99       	sbic	0x1f, 1	; 31
 3c0:	fe cf       	rjmp	.-4      	; 0x3be <eeprom_read_blraw+0x2>
 3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <eeprom_read_blraw+0x14>
 3c4:	f2 bd       	out	0x22, r31	; 34
 3c6:	e1 bd       	out	0x21, r30	; 33
 3c8:	f8 9a       	sbi	0x1f, 0	; 31
 3ca:	31 96       	adiw	r30, 0x01	; 1
 3cc:	00 b4       	in	r0, 0x20	; 32
 3ce:	0d 92       	st	X+, r0
 3d0:	41 50       	subi	r20, 0x01	; 1
 3d2:	50 40       	sbci	r21, 0x00	; 0
 3d4:	b8 f7       	brcc	.-18     	; 0x3c4 <eeprom_read_blraw+0x8>
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
