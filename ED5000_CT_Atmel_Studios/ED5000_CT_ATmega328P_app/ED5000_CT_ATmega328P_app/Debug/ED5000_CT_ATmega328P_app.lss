
ED5000_CT_ATmega328P_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000398  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000040c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000745  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002a4  00000000  00000000  00000c49  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000767  00000000  00000000  00000eed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000168  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000f59b  00000000  00000000  000017bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006df  00000000  00000000  00010d57  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00011436  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000036e  00000000  00000000  000114de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	41 c0       	rjmp	.+130    	; 0x88 <__bad_interrupt>
   6:	00 00       	nop
   8:	3f c0       	rjmp	.+126    	; 0x88 <__bad_interrupt>
   a:	00 00       	nop
   c:	3d c0       	rjmp	.+122    	; 0x88 <__bad_interrupt>
   e:	00 00       	nop
  10:	3b c0       	rjmp	.+118    	; 0x88 <__bad_interrupt>
  12:	00 00       	nop
  14:	39 c0       	rjmp	.+114    	; 0x88 <__bad_interrupt>
  16:	00 00       	nop
  18:	37 c0       	rjmp	.+110    	; 0x88 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	35 c0       	rjmp	.+106    	; 0x88 <__bad_interrupt>
  1e:	00 00       	nop
  20:	33 c0       	rjmp	.+102    	; 0x88 <__bad_interrupt>
  22:	00 00       	nop
  24:	31 c0       	rjmp	.+98     	; 0x88 <__bad_interrupt>
  26:	00 00       	nop
  28:	2f c0       	rjmp	.+94     	; 0x88 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2d c0       	rjmp	.+90     	; 0x88 <__bad_interrupt>
  2e:	00 00       	nop
  30:	2b c0       	rjmp	.+86     	; 0x88 <__bad_interrupt>
  32:	00 00       	nop
  34:	29 c0       	rjmp	.+82     	; 0x88 <__bad_interrupt>
  36:	00 00       	nop
  38:	27 c0       	rjmp	.+78     	; 0x88 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	25 c0       	rjmp	.+74     	; 0x88 <__bad_interrupt>
  3e:	00 00       	nop
  40:	23 c0       	rjmp	.+70     	; 0x88 <__bad_interrupt>
  42:	00 00       	nop
  44:	21 c0       	rjmp	.+66     	; 0x88 <__bad_interrupt>
  46:	00 00       	nop
  48:	1f c0       	rjmp	.+62     	; 0x88 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1d c0       	rjmp	.+58     	; 0x88 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1b c0       	rjmp	.+54     	; 0x88 <__bad_interrupt>
  52:	00 00       	nop
  54:	19 c0       	rjmp	.+50     	; 0x88 <__bad_interrupt>
  56:	00 00       	nop
  58:	17 c0       	rjmp	.+46     	; 0x88 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	15 c0       	rjmp	.+42     	; 0x88 <__bad_interrupt>
  5e:	00 00       	nop
  60:	13 c0       	rjmp	.+38     	; 0x88 <__bad_interrupt>
  62:	00 00       	nop
  64:	11 c0       	rjmp	.+34     	; 0x88 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	5a d1       	rcall	.+692    	; 0x33a <main>
  86:	86 c1       	rjmp	.+780    	; 0x394 <_exit>

00000088 <__bad_interrupt>:
  88:	bb cf       	rjmp	.-138    	; 0x0 <__vectors>

0000008a <rawKey1Pressed>:
	allRawSwitchesOpen = rawSwitch1Open|rawSwitch2Open,
};

extern rawKey1Pressed()
{
	if((PINB & rawSwitch1Open) == rawSwitch1Open) return false;
  8a:	93 b1       	in	r25, 0x03	; 3
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	89 27       	eor	r24, r25
	else return true;
}
  90:	81 70       	andi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	08 95       	ret

00000096 <rawKey2Pressed>:
extern rawKey2Pressed()
{
	if((PINB & rawSwitch2Open) == rawSwitch2Open) return false;
  96:	83 b1       	in	r24, 0x03	; 3
  98:	86 95       	lsr	r24
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	89 27       	eor	r24, r25
	else return true;
}
  9e:	81 70       	andi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	08 95       	ret

000000a4 <debounceSwitch1>:

//bool debouncedKey1Press = false;
//bool debouncedKey2Press = false;

bool debounceSwitch1()
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
	static uint16_t State = 0;
	State = (State<<1)| !rawKey1Pressed() | 0xe000;
  a8:	c0 91 02 01 	lds	r28, 0x0102
  ac:	d0 91 03 01 	lds	r29, 0x0103
  b0:	cc 0f       	add	r28, r28
  b2:	dd 1f       	adc	r29, r29
  b4:	ea df       	rcall	.-44     	; 0x8a <rawKey1Pressed>
  b6:	d0 6e       	ori	r29, 0xE0	; 224
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	89 2b       	or	r24, r25
  be:	11 f0       	breq	.+4      	; 0xc4 <debounceSwitch1+0x20>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	c2 2b       	or	r28, r18
  c6:	d3 2b       	or	r29, r19
  c8:	d0 93 03 01 	sts	0x0103, r29
  cc:	c0 93 02 01 	sts	0x0102, r28
	if(State == 0xf000) return true;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	c1 15       	cp	r28, r1
  d4:	d0 4f       	sbci	r29, 0xF0	; 240
  d6:	09 f0       	breq	.+2      	; 0xda <debounceSwitch1+0x36>
  d8:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <debounceSwitch2>:

bool debounceSwitch2()
{
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	static uint16_t State = 0;
	State = (State<<1)|!rawKey2Pressed() | 0xe000;
  e4:	c0 91 00 01 	lds	r28, 0x0100
  e8:	d0 91 01 01 	lds	r29, 0x0101
  ec:	cc 0f       	add	r28, r28
  ee:	dd 1f       	adc	r29, r29
  f0:	d2 df       	rcall	.-92     	; 0x96 <rawKey2Pressed>
  f2:	d0 6e       	ori	r29, 0xE0	; 224
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	89 2b       	or	r24, r25
  fa:	11 f0       	breq	.+4      	; 0x100 <debounceSwitch2+0x20>
  fc:	20 e0       	ldi	r18, 0x00	; 0
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	c2 2b       	or	r28, r18
 102:	d3 2b       	or	r29, r19
 104:	d0 93 01 01 	sts	0x0101, r29
 108:	c0 93 00 01 	sts	0x0100, r28
	if(State == 0xf000) return true;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	c1 15       	cp	r28, r1
 110:	d0 4f       	sbci	r29, 0xF0	; 240
 112:	09 f0       	breq	.+2      	; 0x116 <debounceSwitch2+0x36>
 114:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <counter_init>:
#include "conf_gpio.h"
#include "conf_clock.h"
#include <util/delay.h>

void counter_init(void){
	DDRB |= (1<<DDB3);
 11c:	23 9a       	sbi	0x04, 3	; 4
	PORTB |= (1<<PINB3); //initialize pin 11 as high (pin11 is counter)
 11e:	2b 9a       	sbi	0x05, 3	; 5
 120:	08 95       	ret

00000122 <incrementCounter>:
	//PORTB &= ~(1<<PINB3); //initialize pin 11 as low, controls the external dry counter
}


void incrementCounter(uint8_t incrementValue){
		for(int i = 0; i < incrementValue; i++){
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	18 16       	cp	r1, r24
 126:	19 06       	cpc	r1, r25
 128:	dc f4       	brge	.+54     	; 0x160 <incrementCounter+0x3e>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
		PORTB &= ~(1<<PINB3); 
 12e:	2b 98       	cbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	4f ef       	ldi	r20, 0xFF	; 255
 132:	51 ee       	ldi	r21, 0xE1	; 225
 134:	64 e0       	ldi	r22, 0x04	; 4
 136:	41 50       	subi	r20, 0x01	; 1
 138:	50 40       	sbci	r21, 0x00	; 0
 13a:	60 40       	sbci	r22, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <incrementCounter+0x14>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <incrementCounter+0x1e>
 140:	00 00       	nop
		_delay_ms(100);
		PORTB |= (1<<PINB3);
 142:	2b 9a       	sbi	0x05, 3	; 5
 144:	4f ef       	ldi	r20, 0xFF	; 255
 146:	51 ee       	ldi	r21, 0xE1	; 225
 148:	64 e0       	ldi	r22, 0x04	; 4
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	50 40       	sbci	r21, 0x00	; 0
 14e:	60 40       	sbci	r22, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <incrementCounter+0x28>
 152:	00 c0       	rjmp	.+0      	; 0x154 <incrementCounter+0x32>
 154:	00 00       	nop
	//PORTB &= ~(1<<PINB3); //initialize pin 11 as low, controls the external dry counter
}


void incrementCounter(uint8_t incrementValue){
		for(int i = 0; i < incrementValue; i++){
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	28 17       	cp	r18, r24
 15c:	39 07       	cpc	r19, r25
 15e:	39 f7       	brne	.-50     	; 0x12e <incrementCounter+0xc>
 160:	08 95       	ret

00000162 <errorHandler_init>:

#include "conf_gpio.h"
#include <avr/eeprom.h>

void errorHandler_init(){
	DDRB |= (1<<DDB5); //initialize pin 13 to control LED
 162:	25 9a       	sbi	0x04, 5	; 4
	DDRB |= (1<<DDB4); //initialize pin 12 to output, only use for debugging during development
 164:	24 9a       	sbi	0x04, 4	; 4
	PORTB |= (1<<PINB4); //raise fail flag for oscilloscope trigger
 166:	2c 9a       	sbi	0x05, 4	; 5
 168:	08 95       	ret

0000016a <errorEEPROMWrite>:
}

void errorEEPROMWrite(uint32_t count ,uint8_t error){
 16a:	cf 92       	push	r12
 16c:	df 92       	push	r13
 16e:	ef 92       	push	r14
 170:	ff 92       	push	r15
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	6b 01       	movw	r12, r22
 17a:	7c 01       	movw	r14, r24
 17c:	14 2f       	mov	r17, r20
	unsigned int init_addr = 0x0000;
	uint8_t error_intro = 0xfc;
	uint16_t next_addr = eeprom_read_word((uint16_t*)init_addr);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	dd d0       	rcall	.+442    	; 0x33e <eeprom_read_word>
	if(next_addr == 0xffff || 0x0000){
	 next_addr = 0x0015;
	}
	else if(next_addr >= 0x03f0){
 184:	80 3f       	cpi	r24, 0xF0	; 240
 186:	23 e0       	ldi	r18, 0x03	; 3
 188:	92 07       	cpc	r25, r18
 18a:	18 f4       	brcc	.+6      	; 0x192 <errorEEPROMWrite+0x28>
		next_addr = 0x0015;
	}
	else {
		next_addr = next_addr + 0x0015;
 18c:	ec 01       	movw	r28, r24
 18e:	65 96       	adiw	r28, 0x15	; 21
 190:	02 c0       	rjmp	.+4      	; 0x196 <errorEEPROMWrite+0x2c>
	uint16_t next_addr = eeprom_read_word((uint16_t*)init_addr);
	if(next_addr == 0xffff || 0x0000){
	 next_addr = 0x0015;
	}
	else if(next_addr >= 0x03f0){
		next_addr = 0x0015;
 192:	c5 e1       	ldi	r28, 0x15	; 21
 194:	d0 e0       	ldi	r29, 0x00	; 0
	}
	else {
		next_addr = next_addr + 0x0015;
	}
	uint8_t err_addr = next_addr + 0x0004;
	eeprom_write_word((uint16_t*)init_addr, next_addr);
 196:	be 01       	movw	r22, r28
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	e8 d0       	rcall	.+464    	; 0x36e <eeprom_write_word>
	eeprom_write_dword((uint32_t*)next_addr,count);
 19e:	b7 01       	movw	r22, r14
 1a0:	a6 01       	movw	r20, r12
 1a2:	ce 01       	movw	r24, r28
 1a4:	df d0       	rcall	.+446    	; 0x364 <eeprom_write_dword>
		next_addr = 0x0015;
	}
	else {
		next_addr = next_addr + 0x0015;
	}
	uint8_t err_addr = next_addr + 0x0004;
 1a6:	8c 2f       	mov	r24, r28
 1a8:	8c 5f       	subi	r24, 0xFC	; 252
	eeprom_write_word((uint16_t*)init_addr, next_addr);
	eeprom_write_dword((uint32_t*)next_addr,count);
	eeprom_write_byte((uint8_t*)err_addr, error_intro);
 1aa:	6c ef       	ldi	r22, 0xFC	; 252
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	cc d0       	rcall	.+408    	; 0x348 <eeprom_write_byte>
	err_addr = err_addr + 1;
 1b0:	8c 2f       	mov	r24, r28
 1b2:	8b 5f       	subi	r24, 0xFB	; 251
	eeprom_write_byte((uint8_t*)err_addr,error);
 1b4:	61 2f       	mov	r22, r17
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	c7 d0       	rcall	.+398    	; 0x348 <eeprom_write_byte>
	
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	08 95       	ret

000001ca <errorHandler>:

void errorHandler(uint8_t errorCode){
 1ca:	c8 2f       	mov	r28, r24
	
	errorHandler_init();
 1cc:	ca df       	rcall	.-108    	; 0x162 <errorHandler_init>
	
	//loop until MCU is reset manually
	while(true){
		
		for (uint8_t i = 0; i<errorCode;i++)
 1ce:	80 e0       	ldi	r24, 0x00	; 0
 1d0:	cc 23       	and	r28, r28
 1d2:	c1 f0       	breq	.+48     	; 0x204 <errorHandler+0x3a>
 1d4:	98 2f       	mov	r25, r24
		{
			PORTB |= (1<<PINB5);
 1d6:	2d 9a       	sbi	0x05, 5	; 5
 1d8:	2f ef       	ldi	r18, 0xFF	; 255
 1da:	39 e6       	ldi	r19, 0x69	; 105
 1dc:	48 e1       	ldi	r20, 0x18	; 24
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	30 40       	sbci	r19, 0x00	; 0
 1e2:	40 40       	sbci	r20, 0x00	; 0
 1e4:	e1 f7       	brne	.-8      	; 0x1de <errorHandler+0x14>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <errorHandler+0x1e>
 1e8:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~(1<<PINB5);
 1ea:	2d 98       	cbi	0x05, 5	; 5
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	39 e6       	ldi	r19, 0x69	; 105
 1f0:	48 e1       	ldi	r20, 0x18	; 24
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	30 40       	sbci	r19, 0x00	; 0
 1f6:	40 40       	sbci	r20, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <errorHandler+0x28>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <errorHandler+0x32>
 1fc:	00 00       	nop
	errorHandler_init();
	
	//loop until MCU is reset manually
	while(true){
		
		for (uint8_t i = 0; i<errorCode;i++)
 1fe:	9f 5f       	subi	r25, 0xFF	; 255
 200:	9c 13       	cpse	r25, r28
 202:	e9 cf       	rjmp	.-46     	; 0x1d6 <errorHandler+0xc>
 204:	9f ef       	ldi	r25, 0xFF	; 255
 206:	2d e3       	ldi	r18, 0x3D	; 61
 208:	39 e4       	ldi	r19, 0x49	; 73
 20a:	91 50       	subi	r25, 0x01	; 1
 20c:	20 40       	sbci	r18, 0x00	; 0
 20e:	30 40       	sbci	r19, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <errorHandler+0x40>
 212:	00 c0       	rjmp	.+0      	; 0x214 <errorHandler+0x4a>
 214:	00 00       	nop
 216:	dc cf       	rjmp	.-72     	; 0x1d0 <errorHandler+0x6>

00000218 <exitDeviceCycleTest_init>:
	allSwitchesOpen = switch1Open|switch2Open,
	};
	
void exitDeviceCycleTest_init(void){
	
	DDRB = 0x00; //initialize all pins on port B as inputs
 218:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB2) ; //pins 10 is set to output
 21a:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PINB0) | (1<<PINB1);  //enable internal pullups on pins 8 and 9
 21c:	85 b1       	in	r24, 0x05	; 5
 21e:	83 60       	ori	r24, 0x03	; 3
 220:	85 b9       	out	0x05, r24	; 5
 222:	08 95       	ret

00000224 <protractExitBar>:
	return;
}
	
int protractExitBar(){
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
	
	PORTB |= (1<<PINB2);  //allow bar to protract
 228:	2a 9a       	sbi	0x05, 2	; 5
	bool debouncedSwitch2State;
	bool debouncedSwitch1State;	
		
	//_delay_ms(protractionTimeTimerMode);
	
	PORTB &= ~(1<<PINB2);
 22a:	2a 98       	cbi	0x05, 2	; 5
 22c:	ce e1       	ldi	r28, 0x1E	; 30
 22e:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (int i = 0; i < 30; i++) {
		debouncedSwitch1State = debounceSwitch1();
 230:	39 df       	rcall	.-398    	; 0xa4 <debounceSwitch1>
		if(debouncedSwitch1State) break;
 232:	81 11       	cpse	r24, r1
 234:	05 c0       	rjmp	.+10     	; 0x240 <protractExitBar+0x1c>
 236:	21 97       	sbiw	r28, 0x01	; 1
		
	//_delay_ms(protractionTimeTimerMode);
	
	PORTB &= ~(1<<PINB2);
	
	for (int i = 0; i < 30; i++) {
 238:	d9 f7       	brne	.-10     	; 0x230 <protractExitBar+0xc>
		if(debouncedSwitch1State) break;
	}
		
	//if((PINB & switch1Open) == switch1Open){
	if(!debouncedSwitch1State){
		return 1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0c c0       	rjmp	.+24     	; 0x258 <protractExitBar+0x34>
 240:	ce e1       	ldi	r28, 0x1E	; 30
 242:	d0 e0       	ldi	r29, 0x00	; 0
		//if switch1 is closed, continue, if its open, break out of main loop
	}
	
	for (int h = 0; h < 30; h++) {
		debouncedSwitch2State = debounceSwitch2();
 244:	4d df       	rcall	.-358    	; 0xe0 <debounceSwitch2>
		if(debouncedSwitch2State) break;
 246:	81 11       	cpse	r24, r1
 248:	05 c0       	rjmp	.+10     	; 0x254 <protractExitBar+0x30>
 24a:	21 97       	sbiw	r28, 0x01	; 1
	if(!debouncedSwitch1State){
		return 1;
		//if switch1 is closed, continue, if its open, break out of main loop
	}
	
	for (int h = 0; h < 30; h++) {
 24c:	d9 f7       	brne	.-10     	; 0x244 <protractExitBar+0x20>
	//if((PINB & switch2Open) != switch2Open){
	if(debouncedSwitch2State){
		return 4;
		//if switch2 is closed, contiue; if closed, break
	}		
	return 0;
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <protractExitBar+0x34>
		if(debouncedSwitch2State) break;
		}
	
	//if((PINB & switch2Open) != switch2Open){
	if(debouncedSwitch2State){
		return 4;
 254:	84 e0       	ldi	r24, 0x04	; 4
 256:	90 e0       	ldi	r25, 0x00	; 0
		//if switch2 is closed, contiue; if closed, break
	}		
	return 0;
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <retractExitBar>:

int retractExitBar(){
 25e:	cf 93       	push	r28
 260:	df 93       	push	r29
	
	PORTB &= ~(1<<PINB2); //trigger bar retract
 262:	2a 98       	cbi	0x05, 2	; 5
 264:	ca e0       	ldi	r28, 0x0A	; 10
 266:	d0 e0       	ldi	r29, 0x00	; 0
	bool debouncedSwitch2State; 
	bool debouncedSwitch1State;
		
	//_delay_ms(retractionTimeTimerMode); //wait 2000 milliseconds
	
	for (int j = 0; j < 10; j++) debouncedSwitch2State = debounceSwitch2();	
 268:	3b df       	rcall	.-394    	; 0xe0 <debounceSwitch2>
 26a:	21 97       	sbiw	r28, 0x01	; 1
 26c:	e9 f7       	brne	.-6      	; 0x268 <retractExitBar+0xa>
		
	//if((PINB & switch2Open) == switch2Open){
	if(!debouncedSwitch2State){
 26e:	88 23       	and	r24, r24
 270:	51 f0       	breq	.+20     	; 0x286 <retractExitBar+0x28>
 272:	ca e0       	ldi	r28, 0x0A	; 10
 274:	d0 e0       	ldi	r29, 0x00	; 0
		return 2;
		//if switch2 is closed, contiue; if closed, break
	}
	for (int k = 0; k < 10; k++) debouncedSwitch1State = debounceSwitch1();
 276:	16 df       	rcall	.-468    	; 0xa4 <debounceSwitch1>
 278:	21 97       	sbiw	r28, 0x01	; 1
 27a:	e9 f7       	brne	.-6      	; 0x276 <retractExitBar+0x18>
	
	//if((PINB & switch1Open) != switch1Open){
	if(debouncedSwitch1State){
 27c:	81 11       	cpse	r24, r1
 27e:	06 c0       	rjmp	.+12     	; 0x28c <retractExitBar+0x2e>
		return 3;
		//if switch1 is closed, continue, if its open, break out of main loop
	}	
	return 0;
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	05 c0       	rjmp	.+10     	; 0x290 <retractExitBar+0x32>
	
	for (int j = 0; j < 10; j++) debouncedSwitch2State = debounceSwitch2();	
		
	//if((PINB & switch2Open) == switch2Open){
	if(!debouncedSwitch2State){
		return 2;
 286:	82 e0       	ldi	r24, 0x02	; 2
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <retractExitBar+0x32>
	}
	for (int k = 0; k < 10; k++) debouncedSwitch1State = debounceSwitch1();
	
	//if((PINB & switch1Open) != switch1Open){
	if(debouncedSwitch1State){
		return 3;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	90 e0       	ldi	r25, 0x00	; 0
		//if switch1 is closed, continue, if its open, break out of main loop
	}	
	return 0;
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <exitDeviceCycleTest>:

	
int exitDeviceCycleTest(void){
 296:	cf 92       	push	r12
 298:	df 92       	push	r13
 29a:	ef 92       	push	r14
 29c:	ff 92       	push	r15
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
	uint32_t counter = 0;
	int result = 0;
	exitDeviceCycleTest_init();
 2a2:	ba df       	rcall	.-140    	; 0x218 <exitDeviceCycleTest_init>
	counter_init();
 2a4:	3b df       	rcall	.-394    	; 0x11c <counter_init>
	result = protractExitBar();
 2a6:	be df       	rcall	.-132    	; 0x224 <protractExitBar>
 2a8:	ec 01       	movw	r28, r24
	if(result !=0) {
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	f1 f0       	breq	.+60     	; 0x2ea <exitDeviceCycleTest+0x54>
		if (result == 1){
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	91 05       	cpc	r25, r1
 2b2:	41 f4       	brne	.+16     	; 0x2c4 <exitDeviceCycleTest+0x2e>
			errorEEPROMWrite(counter, 5);
 2b4:	45 e0       	ldi	r20, 0x05	; 5
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	cb 01       	movw	r24, r22
 2bc:	56 df       	rcall	.-340    	; 0x16a <errorEEPROMWrite>
			return 5;
 2be:	85 e0       	ldi	r24, 0x05	; 5
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	34 c0       	rjmp	.+104    	; 0x32c <exitDeviceCycleTest+0x96>
			 }
		else if(result == 4) {
 2c4:	84 30       	cpi	r24, 0x04	; 4
 2c6:	91 05       	cpc	r25, r1
 2c8:	41 f4       	brne	.+16     	; 0x2da <exitDeviceCycleTest+0x44>
			errorEEPROMWrite(counter, 6);
 2ca:	46 e0       	ldi	r20, 0x06	; 6
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	70 e0       	ldi	r23, 0x00	; 0
 2d0:	cb 01       	movw	r24, r22
 2d2:	4b df       	rcall	.-362    	; 0x16a <errorEEPROMWrite>
			return 6;
 2d4:	86 e0       	ldi	r24, 0x06	; 6
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	29 c0       	rjmp	.+82     	; 0x32c <exitDeviceCycleTest+0x96>
			}
		else{
			errorEEPROMWrite(counter, result);
 2da:	48 2f       	mov	r20, r24
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	cb 01       	movw	r24, r22
 2e2:	43 df       	rcall	.-378    	; 0x16a <errorEEPROMWrite>
			return result;	//retvalue are 5 and 6 to differentiate initialization failure from bar protraction failure
 2e4:	8c 2f       	mov	r24, r28
 2e6:	9d 2f       	mov	r25, r29
 2e8:	21 c0       	rjmp	.+66     	; 0x32c <exitDeviceCycleTest+0x96>
 2ea:	c1 2c       	mov	r12, r1
 2ec:	d1 2c       	mov	r13, r1
 2ee:	76 01       	movw	r14, r12
		}
	}
	
	while(true){
		result = retractExitBar();
 2f0:	b6 df       	rcall	.-148    	; 0x25e <retractExitBar>
 2f2:	ec 01       	movw	r28, r24
		if(result!=0) {
 2f4:	00 97       	sbiw	r24, 0x00	; 0
 2f6:	39 f0       	breq	.+14     	; 0x306 <exitDeviceCycleTest+0x70>
			errorEEPROMWrite(counter, result);
 2f8:	48 2f       	mov	r20, r24
 2fa:	c7 01       	movw	r24, r14
 2fc:	b6 01       	movw	r22, r12
 2fe:	35 df       	rcall	.-406    	; 0x16a <errorEEPROMWrite>
			return result;	//retvalue are 5 and 6 to differentiate initialization failure from bar protraction failure
		}
	}
	
	while(true){
		result = retractExitBar();
 300:	8c 2f       	mov	r24, r28
 302:	9d 2f       	mov	r25, r29
		if(result!=0) {
			errorEEPROMWrite(counter, result);
			return result;
 304:	13 c0       	rjmp	.+38     	; 0x32c <exitDeviceCycleTest+0x96>
		}
		result = protractExitBar();
 306:	8e df       	rcall	.-228    	; 0x224 <protractExitBar>
 308:	ec 01       	movw	r28, r24
		if(result!=0){
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	39 f0       	breq	.+14     	; 0x31c <exitDeviceCycleTest+0x86>
			errorEEPROMWrite(counter, result);
 30e:	48 2f       	mov	r20, r24
 310:	c7 01       	movw	r24, r14
 312:	b6 01       	movw	r22, r12
 314:	2a df       	rcall	.-428    	; 0x16a <errorEEPROMWrite>
		result = retractExitBar();
		if(result!=0) {
			errorEEPROMWrite(counter, result);
			return result;
		}
		result = protractExitBar();
 316:	8c 2f       	mov	r24, r28
 318:	9d 2f       	mov	r25, r29
		if(result!=0){
			errorEEPROMWrite(counter, result);
			return result;
 31a:	08 c0       	rjmp	.+16     	; 0x32c <exitDeviceCycleTest+0x96>
		}
		incrementCounter(1);	//costs 200ms
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	01 df       	rcall	.-510    	; 0x122 <incrementCounter>
		counter = counter+1;
 320:	8f ef       	ldi	r24, 0xFF	; 255
 322:	c8 1a       	sub	r12, r24
 324:	d8 0a       	sbc	r13, r24
 326:	e8 0a       	sbc	r14, r24
 328:	f8 0a       	sbc	r15, r24
	}
 32a:	e2 cf       	rjmp	.-60     	; 0x2f0 <exitDeviceCycleTest+0x5a>
	return result;
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	df 90       	pop	r13
 336:	cf 90       	pop	r12
 338:	08 95       	ret

0000033a <main>:
 */
int main(void)
{ 
	uint8_t error = 0;
	
	error = exitDeviceCycleTest();
 33a:	ad df       	rcall	.-166    	; 0x296 <exitDeviceCycleTest>
	
	//only enter this loop if there is a failure
	errorHandler(error);
 33c:	46 df       	rcall	.-372    	; 0x1ca <errorHandler>

0000033e <eeprom_read_word>:
 33e:	a8 e1       	ldi	r26, 0x18	; 24
 340:	b0 e0       	ldi	r27, 0x00	; 0
 342:	42 e0       	ldi	r20, 0x02	; 2
 344:	50 e0       	ldi	r21, 0x00	; 0
 346:	18 c0       	rjmp	.+48     	; 0x378 <eeprom_read_blraw>

00000348 <eeprom_write_byte>:
 348:	26 2f       	mov	r18, r22

0000034a <eeprom_write_r18>:
 34a:	f9 99       	sbic	0x1f, 1	; 31
 34c:	fe cf       	rjmp	.-4      	; 0x34a <eeprom_write_r18>
 34e:	1f ba       	out	0x1f, r1	; 31
 350:	92 bd       	out	0x22, r25	; 34
 352:	81 bd       	out	0x21, r24	; 33
 354:	20 bd       	out	0x20, r18	; 32
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	f8 94       	cli
 35a:	fa 9a       	sbi	0x1f, 2	; 31
 35c:	f9 9a       	sbi	0x1f, 1	; 31
 35e:	0f be       	out	0x3f, r0	; 63
 360:	01 96       	adiw	r24, 0x01	; 1
 362:	08 95       	ret

00000364 <eeprom_write_dword>:
 364:	24 2f       	mov	r18, r20
 366:	f1 df       	rcall	.-30     	; 0x34a <eeprom_write_r18>
 368:	25 2f       	mov	r18, r21
 36a:	ef df       	rcall	.-34     	; 0x34a <eeprom_write_r18>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <eeprom_write_word>

0000036e <eeprom_write_word>:
 36e:	ec df       	rcall	.-40     	; 0x348 <eeprom_write_byte>
 370:	27 2f       	mov	r18, r23
 372:	eb cf       	rjmp	.-42     	; 0x34a <eeprom_write_r18>

00000374 <eeprom_read_block>:
 374:	dc 01       	movw	r26, r24
 376:	cb 01       	movw	r24, r22

00000378 <eeprom_read_blraw>:
 378:	fc 01       	movw	r30, r24
 37a:	f9 99       	sbic	0x1f, 1	; 31
 37c:	fe cf       	rjmp	.-4      	; 0x37a <eeprom_read_blraw+0x2>
 37e:	06 c0       	rjmp	.+12     	; 0x38c <eeprom_read_blraw+0x14>
 380:	f2 bd       	out	0x22, r31	; 34
 382:	e1 bd       	out	0x21, r30	; 33
 384:	f8 9a       	sbi	0x1f, 0	; 31
 386:	31 96       	adiw	r30, 0x01	; 1
 388:	00 b4       	in	r0, 0x20	; 32
 38a:	0d 92       	st	X+, r0
 38c:	41 50       	subi	r20, 0x01	; 1
 38e:	50 40       	sbci	r21, 0x00	; 0
 390:	b8 f7       	brcc	.-18     	; 0x380 <eeprom_read_blraw+0x8>
 392:	08 95       	ret

00000394 <_exit>:
 394:	f8 94       	cli

00000396 <__stop_program>:
 396:	ff cf       	rjmp	.-2      	; 0x396 <__stop_program>
