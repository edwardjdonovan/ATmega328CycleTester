
ED5000_CT_ATmega328P_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000025f  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000150  00000000  00000000  00000483  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000488  00000000  00000000  000005d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000f240  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ed  00000000  00000000  0000fcdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000fec9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000002db  00000000  00000000  0000fee1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	36 c0       	rjmp	.+108    	; 0x7a <__vector_3>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0c d0       	rcall	.+24     	; 0x8e <main>
  76:	5e c0       	rjmp	.+188    	; 0x134 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <__vector_3>:
 *
 * Create breakpoint here and then run. Press SW0 in order to test
 * this.
 */
ISR(EXAMPLE_PCINT_vect)
{
  7a:	1f 92       	push	r1
  7c:	0f 92       	push	r0
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	0f 92       	push	r0
  82:	11 24       	eor	r1, r1

}
  84:	0f 90       	pop	r0
  86:	0f be       	out	0x3f, r0	; 63
  88:	0f 90       	pop	r0
  8a:	1f 90       	pop	r1
  8c:	18 95       	reti

0000008e <main>:
	//uint8_t switch1Closed;
	//uint8_t switch2Closed;
	uint8_t error = 0;
	uint8_t fail = 0;
	
	DDRB = 0x00; //initialize all pins on port B as inputs
  8e:	14 b8       	out	0x04, r1	; 4
	DDRB |= (1<<DDB2) | (1<<DDB3); //pins 10 and 11 are set to outputs
  90:	84 b1       	in	r24, 0x04	; 4
  92:	8c 60       	ori	r24, 0x0C	; 12
  94:	84 b9       	out	0x04, r24	; 4
	
	//switch1Closed = 0x01;	//pin 8 is limit switch 1
	//switch2Closed = 0x02;	//pin 9 is limit switch 2
	
	PORTB |= (1<<PINB2); //initialize pin 10 as high to protract bar
  96:	2a 9a       	sbi	0x05, 2	; 5
	PORTB &= ~(1<<PINB3); //initialize pin 11 as low, controls the external dry counter
  98:	2b 98       	cbi	0x05, 3	; 5
	
	//check to see if switch 1 is closed
	if((PINB & switch1Open) == switch1Open){
  9a:	18 99       	sbic	0x03, 0	; 3
  9c:	1e c0       	rjmp	.+60     	; 0xda <main+0x4c>
		fail = 1;
	}
	
	while(!fail){
		
		PORTB &= ~(1<<PINB2); //trigger bar retract
  9e:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	33 ed       	ldi	r19, 0xD3	; 211
  a4:	40 e3       	ldi	r20, 0x30	; 48
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x18>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x22>
  b0:	00 00       	nop
		
		_delay_ms(1000); //wait 1 second
		
		if((PINB & switch2Open) == switch2Open){
  b2:	19 99       	sbic	0x03, 1	; 3
  b4:	14 c0       	rjmp	.+40     	; 0xde <main+0x50>
			error = 2;
			//if switch2 is closed, contiue; if closed, break
			break;
		}
		if((PINB & switch1Open) != switch1Open){
  b6:	18 9b       	sbis	0x03, 0	; 3
  b8:	14 c0       	rjmp	.+40     	; 0xe2 <main+0x54>
			error = 3;
			//if switch1 is closed, continue, if its open, break out of main loop
			break;
		}		
		PORTB |= (1<<PINB2);  //allow bar to protract
  ba:	2a 9a       	sbi	0x05, 2	; 5
  bc:	5f ef       	ldi	r21, 0xFF	; 255
  be:	83 ed       	ldi	r24, 0xD3	; 211
  c0:	90 e3       	ldi	r25, 0x30	; 48
  c2:	51 50       	subi	r21, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x34>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x3e>
  cc:	00 00       	nop
		
		_delay_ms(1000);
		
		if((PINB & switch1Open) == switch1Open){
  ce:	18 99       	sbic	0x03, 0	; 3
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <main+0x58>
			error = 1;
			//if switch1 is closed, continue, if its open, break out of main loop
			break;
		}
		if((PINB & switch2Open) != switch2Open){
  d2:	19 99       	sbic	0x03, 1	; 3
  d4:	e4 cf       	rjmp	.-56     	; 0x9e <main+0x10>
			error = 4;
  d6:	94 e0       	ldi	r25, 0x04	; 4
  d8:	07 c0       	rjmp	.+14     	; 0xe8 <main+0x5a>
	PORTB |= (1<<PINB2); //initialize pin 10 as high to protract bar
	PORTB &= ~(1<<PINB3); //initialize pin 11 as low, controls the external dry counter
	
	//check to see if switch 1 is closed
	if((PINB & switch1Open) == switch1Open){
		error = 5;
  da:	95 e0       	ldi	r25, 0x05	; 5
  dc:	05 c0       	rjmp	.+10     	; 0xe8 <main+0x5a>
		PORTB &= ~(1<<PINB2); //trigger bar retract
		
		_delay_ms(1000); //wait 1 second
		
		if((PINB & switch2Open) == switch2Open){
			error = 2;
  de:	92 e0       	ldi	r25, 0x02	; 2
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <main+0x5a>
			//if switch2 is closed, contiue; if closed, break
			break;
		}
		if((PINB & switch1Open) != switch1Open){
			error = 3;
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	01 c0       	rjmp	.+2      	; 0xe8 <main+0x5a>
		PORTB |= (1<<PINB2);  //allow bar to protract
		
		_delay_ms(1000);
		
		if((PINB & switch1Open) == switch1Open){
			error = 1;
  e6:	91 e0       	ldi	r25, 0x01	; 1
			break;
		}		
		 //increment counter
	}
	
	DDRB |= (1<<DDB5); //set pin 13 to output to control LED
  e8:	25 9a       	sbi	0x04, 5	; 4
	
	//only enter this loop if there is a failure
	while(true){
		
		for (uint8_t i = 0; i<error;i++)
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	99 23       	and	r25, r25
  ee:	c1 f0       	breq	.+48     	; 0x120 <main+0x92>
  f0:	82 2f       	mov	r24, r18
		{
			PORTB |= (1<<PINB5);
  f2:	2d 9a       	sbi	0x05, 5	; 5
  f4:	3f ef       	ldi	r19, 0xFF	; 255
  f6:	49 e6       	ldi	r20, 0x69	; 105
  f8:	58 e1       	ldi	r21, 0x18	; 24
  fa:	31 50       	subi	r19, 0x01	; 1
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	50 40       	sbci	r21, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x76>
 104:	00 00       	nop
			_delay_ms(500);
			PORTB &= ~(1<<PINB5);
 106:	2d 98       	cbi	0x05, 5	; 5
 108:	3f ef       	ldi	r19, 0xFF	; 255
 10a:	49 e6       	ldi	r20, 0x69	; 105
 10c:	58 e1       	ldi	r21, 0x18	; 24
 10e:	31 50       	subi	r19, 0x01	; 1
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	50 40       	sbci	r21, 0x00	; 0
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x80>
 116:	00 c0       	rjmp	.+0      	; 0x118 <main+0x8a>
 118:	00 00       	nop
	DDRB |= (1<<DDB5); //set pin 13 to output to control LED
	
	//only enter this loop if there is a failure
	while(true){
		
		for (uint8_t i = 0; i<error;i++)
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	89 13       	cpse	r24, r25
 11e:	e9 cf       	rjmp	.-46     	; 0xf2 <main+0x64>
 120:	8f ef       	ldi	r24, 0xFF	; 255
 122:	3d e3       	ldi	r19, 0x3D	; 61
 124:	49 e4       	ldi	r20, 0x49	; 73
 126:	81 50       	subi	r24, 0x01	; 1
 128:	30 40       	sbci	r19, 0x00	; 0
 12a:	40 40       	sbci	r20, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x98>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0xa2>
 130:	00 00       	nop
 132:	dc cf       	rjmp	.-72     	; 0xec <main+0x5e>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
